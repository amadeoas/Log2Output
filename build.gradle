plugins {
	id 'java'
	id 'eclipse'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

def props = new Properties()
file("src/main/resources/application.properties").withInputStream { props.load(it) }

group = 'uk.co.bocaditos'
version = props.getProperty("app.version")
sourceCompatibility = '17'

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'

	implementation 'org.dhatim:fastexcel-reader:0.19.0'
    implementation 'org.dhatim:fastexcel:0.19.0'

	implementation 'org.freemarker:freemarker:2.3.34'
//	implementation 'co.uk.bocaditos:CdmLib:1.00.000'

	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

check.dependsOn jacocoTestCoverageVerification

javadoc {
    destinationDir = file("${buildDir}/libs/javadoc")
}

test {
	jacoco {
		enabled = true
	}
	finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}

eclipse {
  classpath {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.processResources {
	filesMatching("**/application.properties") {expand(project.properties)}
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
	group 'documentation'
    reports {
        xml.required = true
        csv.required = false
        html.destination file("${buildDir}/reports/jacoco")
    }
    afterEvaluate {
    	getClassDirectories().setFrom(files(classDirectories.files.collect {
    		fileTree(dir: it,
    			exclude: [])
    	}))
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
        	element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            excludes = ['uk.com.bocaditos.test.*']
        }
    }
}

build {
	dependsOn compileJava, compileTestJava, test, jar
}

jar {
	enabled = true
}